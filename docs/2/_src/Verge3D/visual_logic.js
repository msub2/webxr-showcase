/**
 * Generated by Verge3D Puzzles v.3.8.1
 * Mon Jan 03 2022 01:37:23 GMT-0500 (Eastern Standard Time)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["move"] = move;

var PROC = {
    "move": move,
};

var x, y, speed, moveVector, fly, orientation, player;


// createVector puzzle
function createVector(x, y, z) {
    return [x, y, z];
};



// getVectorValue puzzle
function getVectorValue(vector, value) {

    var vector = _pGlob.vec3Tmp.fromArray(vector);

    switch (value) {
    case 'X':
        return vector.x;
    case 'Y':
        return vector.y;
    case 'Z':
        return vector.z;
    case 'IS_ZERO':
        return Boolean(vector.length() <= Number.EPSILON);
    case 'LENGTH':
        return vector.length();
    case 'NEGATED':
        return [-vector.x, -vector.y, -vector.z];
    case 'NORMALIZED':
        return vector.normalize().toArray();
    default:
        console.error('get value from vector: Wrong value');
        return;
    }
};




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}





/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




function RotationInterface() {
    /**
     * For user manipulations use XYZ extrinsic rotations (which
     * are the same as ZYX intrinsic rotations)
     *     - Blender/Max/Maya use extrinsic rotations in the UI
     *     - XYZ is the default option, but could be set from
     *       some order hint if exported
     */
    this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
    this._actualRotation = new v3d.Euler();
}

Object.assign(RotationInterface, {
    initObject: function(obj) {
        if (obj.userData.v3d.puzzles === undefined) {
            obj.userData.v3d.puzzles = {}
        }
        if (obj.userData.v3d.puzzles.rotationInterface === undefined) {
            obj.userData.v3d.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.v3d.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
    }
});

Object.assign(RotationInterface.prototype, {

    updateFromObject: function(obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
            this._actualRotation.copy(obj.rotation);
            this._updateUserRotFromActualRot();
        }
    },

    getActualRotation: function(euler) {
        return euler.copy(this._actualRotation);
    },

    setUserRotation: function(euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
    },

    getUserRotation: function(euler) {
        return euler.copy(this._userRotation);
    },

    _updateUserRotFromActualRot: function() {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
    },

    _updateActualRotFromUserRot: function() {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
    }

});




// getObjTransform puzzle
function getObjTransform(objName, isWorldSpace, mode, coord) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;

    var coordSystem = getCoordSystem();

    var transformVal;

    if (isWorldSpace && obj.parent) {
        if (mode === 'position') {
            transformVal = coordsTransform(obj.getWorldPosition(_pGlob.vec3Tmp), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        } else if (mode === 'rotation') {
            transformVal = coordsTransform(obj.getWorldEuler(_pGlob.eulerTmp, 'XYZ'), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        } else if (mode === 'scale') {
            transformVal = coordsTransform(obj.getWorldScale(_pGlob.vec3Tmp), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        }

    } else if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
        transformVal = eulerV3DToBlenderShortest(obj.rotation,
                _pGlob.eulerTmp);

    } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
        // Maya coordinates
        // Use separate rotation interface to fix ambiguous rotations for Maya,
        // might as well do the same for Blender/Max.

        var rotUI = RotationInterface.initObject(obj);
        transformVal = rotUI.getUserRotation(_pGlob.eulerTmp);

    } else {
        transformVal = coordsTransform(obj[mode].clone(), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
    }

    if (mode === 'rotation') {
        transformVal.x = v3d.MathUtils.radToDeg(transformVal.x);
        transformVal.y = v3d.MathUtils.radToDeg(transformVal.y);
        transformVal.z = v3d.MathUtils.radToDeg(transformVal.z);
    }

    if (coord == 'xyz') {
        // remove order component for Euler vectors
        return transformVal.toArray().slice(0, 3);
    } else {
        return transformVal[coord];
    }
}



// setVectorValue puzzle
function setVectorValue(vector, valueName, value) {
    switch (valueName) {
    case 'X':
        vector[0] = value;
        break;
    case 'Y':
        vector[1] = value;
        break;
    case 'Z':
        vector[2] = value;
        break;
    case 'LENGTH':
        _pGlob.vec3Tmp.fromArray(vector).setLength(value).toArray(vector);
        break;
    }
}



// vectorMath puzzle
function vectorMath(vec1, operation, vec2) {

    var vec1 = _pGlob.vec3Tmp.fromArray(vec1);
    var vec2 = _pGlob.vec3Tmp2.fromArray(vec2);

    switch (operation) {
    case 'ADD':
        return vec1.add(vec2).toArray();
    case 'SUBTRACT':
        return vec1.sub(vec2).toArray();
    case 'MULTIPLY':
        return vec1.multiply(vec2).toArray();
    case 'DIVIDE':
        return vec1.divide(vec2).toArray();
    case 'DOT':
        return vec1.dot(vec2);
    case 'CROSS':
        return vec1.cross(vec2).toArray();
    case 'ROTATE':
        var euler = _pGlob.eulerTmp;
        vec2.multiplyScalar(Math.PI/180)
        return vec1.applyEuler(euler.setFromVector3(vec2)).toArray();
    default:
        console.error('vector math: Wrong operation');
        return;
    }
};



// setObjTransform puzzle
function setObjTransform(objSelector, isWorldSpace, mode, vector, offset){
    var x = vector[0];
      var y = vector[1];
      var z = vector[2];

    var objNames = retrieveObjectNames(objSelector);

    function setObjProp(obj, prop, val) {
        if (!offset) {
            obj[mode][prop] = val;
        } else {
            if (mode != "scale")
                obj[mode][prop] += val;
            else
                obj[mode][prop] *= val;
        }
    }

    var inputsUsed = _pGlob.vec3Tmp.set(Number(x !== ''), Number(y !== ''),
            Number(z !== ''));
    var coords = _pGlob.vec3Tmp2.set(x || 0, y || 0, z || 0);

    if (mode === 'rotation') {
        // rotations are specified in degrees
        coords.multiplyScalar(v3d.MathUtils.DEG2RAD);
    }

    var coordSystem = getCoordSystem();

    coordsTransform(inputsUsed, coordSystem, 'Y_UP_RIGHT', true);
    coordsTransform(coords, coordSystem, 'Y_UP_RIGHT', mode === 'scale');

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj) continue;

        if (isWorldSpace && obj.parent) {
            obj.matrixWorld.decomposeE(obj.position, obj.rotation, obj.scale);

            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

            obj.matrixWorld.composeE(obj.position, obj.rotation, obj.scale);
            obj.matrix.multiplyMatrices(_pGlob.mat4Tmp.copy(obj.parent.matrixWorld).invert(), obj.matrixWorld);
            obj.matrix.decompose(obj.position, obj.quaternion, obj.scale);

        } else if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
            // Blender/Max coordinates

            // need all the rotations for order conversions, especially if some
            // inputs are not specified
            var euler = eulerV3DToBlenderShortest(obj.rotation, _pGlob.eulerTmp);
            coordsTransform(euler, coordSystem, 'Y_UP_RIGHT');

            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            /**
             * convert from Blender/Max default XYZ extrinsic order to v3d XYZ
             * intrinsic with reversion (XYZ -> ZYX) and axes swizzling (ZYX -> YZX)
             */
            euler.order = "YZX";
            euler.reorder(obj.rotation.order);
            obj.rotation.copy(euler);

        } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
            // Maya coordinates

            // Use separate rotation interface to fix ambiguous rotations for Maya,
            // might as well do the same for Blender/Max.

            var rotUI = RotationInterface.initObject(obj);
            var euler = rotUI.getUserRotation(_pGlob.eulerTmp);
            // TODO(ivan): this probably needs some reasonable wrapping
            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            rotUI.setUserRotation(euler);
            rotUI.getActualRotation(obj.rotation);
        } else {
            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

        }

        obj.updateMatrixWorld(true);
    }

}


// Describe this function...
function move(x, y) {
  /* Get our initial move vector and normalize it */
  moveVector = createVector(x, -y, 0);
  moveVector = getVectorValue(moveVector, 'NORMALIZED');
  /* Store our head rotation */
  orientation = createVector(0, 0, getObjTransform('__DEFAULT_CAMERA__', false, 'rotation', 'z'));
  /* Zero out movement if not flying */
  if (fly != true) {
    setVectorValue(orientation, 'X', 0);
    setVectorValue(orientation, 'Y', 0);
  }
  /* Scale movement vector based on speed */
  setVectorValue(moveVector, 'X', getVectorValue(moveVector, 'X') * speed);
  setVectorValue(moveVector, 'Y', getVectorValue(moveVector, 'Y') * speed);
  setVectorValue(moveVector, 'Z', getVectorValue(moveVector, 'Z') * speed);
  /* Adjust vector based on where we're looking and move player */
  moveVector = vectorMath(moveVector, 'ROTATE', orientation);
  setObjTransform('Player', false, 'position', moveVector, true);
  var VARS = Object.defineProperties({}, {
    "x": { get: function() { return x; }, set: function(val) { x = val; } },
    "y": { get: function() { return y; }, set: function(val) { y = val; } },
    "speed": { get: function() { return speed; }, set: function(val) { speed = val; } },
    "moveVector": { get: function() { return moveVector; }, set: function(val) { moveVector = val; } },
    "fly": { get: function() { return fly; }, set: function(val) { fly = val; } },
    "orientation": { get: function() { return orientation; }, set: function(val) { orientation = val; } },
    "player": { get: function() { return player; }, set: function(val) { player = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('// Built-in variables: app, v3d, VARS, PROC' + '\n' +
  'app.scene.getObjectByName(\'Player\').updateMatrixWorld(true);')))(appInstance, v3d, VARS, PROC);

}


// isSceneLoaded puzzle
function isSceneLoaded(url) {
    if (appInstance.scene) {
        var scene = url === '' ? appInstance.scene : appInstance.scene.getObjectByName(url);
        if (scene)
            return true;
        else
            return false;
    } else {
        return false;
    }
}



// makeParent puzzle
function makeParent(objName, targetObjName) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;
    if (targetObjName && targetObjName !== LIST_NONE) {
        var targetObj = getObjectByName(targetObjName);
        if (!targetObj)
            return;
    } else {
        obj.traverseAncestors(function(ancObj) {
            if (ancObj.type == "Scene")
                targetObj = ancObj;
        });
    }
    var matOffset = new v3d.Matrix4();
    matOffset.copy(targetObj.matrixWorld).invert();
    matOffset.multiply(obj.matrixWorld);
    matOffset.decompose(obj.position, obj.quaternion, obj.scale);
    targetObj.add(obj);

    obj.updateMatrixWorld(true);
}



// setActiveCamera puzzle
function setActiveCamera(camName) {
    var camera = getObjectByName(camName);
    if (!camera || !camera.isCamera || appInstance.getCamera() == camera)
        return;
    appInstance.setCamera(camera);
}



// xrControllerProp puzzle
function xrControllerProp(prop) {

    if (_pGlob.xrSessionAcquired) {
        var controller = appInstance.xrControllers[_pGlob.gamepadIndex || 0];
        var inputSource = _pGetInputSource(controller);
    } else {
        var controller = undefined;
        var inputSource = undefined;
    }

    switch (prop) {
    case 'OBJECT':
        if (controller)
            return controller.name;
        else
            return '';

    case 'RAY_RETICLE':
        if (controller && controller.children.length)
            return controller.children[0].name;
        else
            return '';

    case 'HANDEDNESS':
        if (controller && inputSource)
            return inputSource.handedness;
        else
            return '';

    case 'TARGET_RAY_MODE':
        if (controller && inputSource)
            return inputSource.targetRayMode;
        else
            return '';

    case 'PROFILES':
        if (controller && inputSource)
            return inputSource.profiles;
        else
            return [];

    case 'GAMEPAD_INDEX':
        if (controller && inputSource && inputSource.gamepad)
            return _pGlob.gamepadIndex || 0;
        else
            return 0;
    }

}



// createObject puzzle
function createObject(type, name, width, height, depth, radius, tube, segments, cameraType, lightType, fov) {

    var oldObj = appInstance.scene.getObjectByName(name);
    if (oldObj) {
        oldObj.parent.remove(oldObj);
    }

    var obj;
    var geometry;

    switch (type) {
        case 'BOX':
            geometry = new v3d.BoxGeometry(width, height, depth);
            break;
        case 'CAMERA':
            var aspect = appInstance.container.offsetWidth / appInstance.container.offsetHeight;

            if (cameraType == 'PERSPECTIVE') {

                obj = new v3d.PerspectiveCamera(fov, aspect, 1, 1000);

            } else {

                var width = fov * aspect;
                obj = new v3d.OrthographicCamera(-width/2, width/2, fov/2, -fov/2, -1000, 1000);

            }

            obj.lookAt(_pGlob.vec3Tmp.set(0, 0, 0));
            break;
        case 'CIRCLE':
            geometry = new v3d.CircleGeometry(radius, segments);
            break;
        case 'CONE':
            geometry = new v3d.ConeGeometry(radius, height, segments);
            break;
        case 'CYLINDER':
            geometry = new v3d.CylinderGeometry(radius, radius, height, segments);
            break;
        case 'EMPTY':
            obj = new v3d.Object3D();
            break;
        case 'LIGHT':
            var color = 0xffffff;
            var intensity = 0.5;

            switch (lightType) {
                case 'AMBIENT':
                    obj = new v3d.AmbientLight(color, intensity);
                    break;
                case 'AREA':
                    v3d.RectAreaLightUniformsLib.init(LTC_MAT_1, LTC_MAT_2);
                    obj = new v3d.RectAreaLight(color, intensity, 1, 1);
                    break;
                case 'DIRECTIONAL':
                    obj = new v3d.DirectionalLight(color, intensity);
                    break;
                case 'HEMISPHERE':
                    obj = new v3d.HemisphereLight(color, 0, intensity);
                    break;
                case 'POINT':
                    obj = new v3d.PointLight(color, intensity);
                    break;
                case 'SPOT':
                    obj = new v3d.SpotLight(color, intensity);
                    break;
            }

            obj.isFreeLight = true;

            break;
        case 'PLANE':
            geometry = new v3d.PlaneGeometry(width, height, 1, 1);
            break;
        case 'SPHERE':
            geometry = new v3d.SphereGeometry(radius, 32, 32);
            break;
        case 'TEAPOT':
            geometry = new v3d.TeapotGeometry(width);
            break;
        case 'TORUS':
            geometry = new v3d.TorusGeometry(radius, tube, 32, 32);
            break;
    }

    if (geometry) {
        var material = new v3d.MeshStandardMaterial({
            color: 'white',
            roughness: 1.0,
            metalness: 0.0,
            side: (type == 'CIRCLE' || type == 'PLANE' || type == 'TEAPOT') ? v3d.DoubleSide : v3d.FrontSide
        });

        material.name = name + 'Material';

        obj = new v3d.Mesh(geometry, material);
    }

    obj.name = name;

    appInstance.scene.add(obj);

    // clean object cache
    _pGlob.objCache = {};

}



// getEntityByName puzzle
function getEntityByName(name, getWhat) {
    switch (getWhat) {
        case 'OBJECT':
        case 'ANIMATION':
        case 'MATERIAL':
            return name;
        case 'GROUP':
            return ['GROUP', name];
    }
}



// traverseControllers puzzle
function traverseControllers(callback) {
    if (_pGlob.xrSessionAcquired) {
        for (var i = 0; i < appInstance.xrControllers.length; i++) {

            var controller = appInstance.xrControllers[i];
            var inputSource = _pGetInputSource(controller);

            if (controller && inputSource) {
                _pGlob.gamepadIndex = i;
                callback();
            }
        }
    }
}



// xrSessionEvent puzzle
function xrSessionEvent(eventType, callback) {

    var eventHandler = function(event) {
        var ctrlObj = event.target;
        // set gamepad index to controller index
        _pGlob.gamepadIndex = appInstance.xrControllers.indexOf(ctrlObj);
        callback(event);
    }

    _pGlob.xrSessionCallbacks.push([eventType, eventHandler]);

    // register controller event here if executed after XR session acquisition
    if (_pGlob.xrSessionAcquired) {
        appInstance.xrControllers.forEach(function(controller) {
            controller.addEventListener(eventType, eventHandler);
            if (v3d.PL.editorEventListeners)
                v3d.PL.editorEventListeners.push([controller, eventType, eventHandler]);
        });
    }

}



// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// addHTMLElement puzzle
function addHTMLElement(elemType, id, mode, targetId, isParent) {

    var win = isParent ? window.parent : window;

    var elem = win.document.createElement(elemType);
    if (id !== '')
        elem.id = id;

    var targetElem = getElement(targetId, isParent);
    if (targetElem instanceof win.Element) {
        switch (mode) {
            case 'TO':
                targetElem.appendChild(elem);
                break;
            case 'BEFORE':
                targetElem.insertAdjacentElement('beforebegin', elem);
                break;
            case 'AFTER':
                targetElem.insertAdjacentElement('afterend', elem);
                break;
        }
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 wrong behavior
            elem.setAttribute(attr, value);
        } else if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



function _pGetInputSource(controller) {
    if (controller && controller.userData.v3d && controller.userData.v3d.inputSource) {
        return controller.userData.v3d.inputSource
    } else {
        return null;
    }
};

function _pTraverseNonControllers(obj, callback) {

    if (obj.name.startsWith('XR_CONTROLLER_'))
        return;

    callback(obj);

    var children = obj.children;

    for (var i = 0, l = children.length; i < l; i++) {

        _pTraverseNonControllers(children[i], callback);

    }

};

function _pXRGetIntersections(controller) {

    controller.updateMatrixWorld(true);

    _pGlob.mat4Tmp.identity().extractRotation(controller.matrixWorld);

    var objList = [];

    _pTraverseNonControllers(appInstance.scene, function(obj) {
        objList.push(obj);
    });

    var raycaster = new v3d.Raycaster();
    raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);
    raycaster.ray.direction.set(0, 0, -1).applyMatrix4(_pGlob.mat4Tmp);

    return raycaster.intersectObjects(objList);

}

function _pXROnSelect(event) {

    if (!_pGlob.objClickInfo)
        return;

    var controller = event.target;

    var intersections = _pXRGetIntersections(controller);

    if (intersections.length > 0) {
        var intersection = intersections[0];
        var obj = intersection.object;

        // save the object for the pickedObject block
        _pGlob.pickedObject = getPickedObjectName(obj);

        _pGlob.objClickInfo.forEach(function(el) {
            var isPicked = obj && objectsIncludeObj(retrieveObjectNames(el.objSelector), getPickedObjectName(obj));
            el.callbacks[isPicked ? 0 : 1]();
        });
    } else {
        _pGlob.objClickInfo.forEach(function(el) {
            // missed
            el.callbacks[1]();
        });
    }

}



// enterVRMode puzzle
function enterVRMode(refSpace, enterCb, exitCb, unAvailableCb) {

    var DEFAULT_DEPTH = 10;

    var _rayReticleDepth = [];
    var _hoveredObjects = [];

    function onControllerHover() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            var intersections = _pXRGetIntersections(controller);

            if (intersections.length > 0) {
                var intersection = intersections[0];
                var obj = intersection.object;
                _rayReticleDepth[i] = intersection.distance;
            } else {
                var obj = null;
                _rayReticleDepth[i] = DEFAULT_DEPTH;
            }

            controller.children.forEach(function(child) {
                if (child.name.indexOf('_RAY') > -1) {
                    child.scale.z = _rayReticleDepth[i];
                } else if (child.name.indexOf('_RETICLE') > -1) {
                    // reduces crossing artefacts
                    child.position.z = -0.95 * _rayReticleDepth[i];
                }
            });

            var prevHovered = _hoveredObjects[i];
            var currHovered = obj ? getPickedObjectName(obj) : '';

            if (prevHovered == currHovered) {
                continue;
            }

            // first - all "out" callbacks, then - all "over"
            _pGlob.objHoverInfo.forEach(function(el) {
                if (objectsIncludeObj(retrieveObjectNames(el.objSelector), prevHovered)) {
                    // ensure the correct value of the hoveredObject block
                    _pGlob.hoveredObject = prevHovered;
                    el.callbacks[1]();
                }
            });

            _pGlob.objHoverInfo.forEach(function(el) {
                if (objectsIncludeObj(retrieveObjectNames(el.objSelector), currHovered)) {
                    // ensure the correct value of the hoveredObject block
                    _pGlob.hoveredObject = currHovered;
                    el.callbacks[0]();
                }
            });

            _hoveredObjects[i] = currHovered;
        }
    }

    switch (refSpace) {
        case 'SITTING':
            var referenceSpace = 'local-floor';
            break;
        case 'WALKING':
            var referenceSpace = 'unbounded';
            break;
        case 'ORIGIN':
            var referenceSpace = 'local';
            break;
        case 'ROOM':
            var referenceSpace = 'bounded-floor';
            break;
        case 'VIEWER':
            var referenceSpace = 'viewer';
            break;
        default:
            console.error('puzzles: Wrong VR reference space');
            return;
    }

    appInstance.initWebXR('immersive-vr', referenceSpace, function() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            // clicks
            controller.addEventListener('select', _pXROnSelect);
            if (v3d.PL.editorEventListeners)
                v3d.PL.editorEventListeners.push([controller, 'select', _pXROnSelect]);

            _pGlob.xrSessionCallbacks.forEach(function(pair) {
                controller.addEventListener(pair[0], pair[1]);
                if (v3d.PL.editorEventListeners)
                    v3d.PL.editorEventListeners.push([controller, pair[0], pair[1]]);
            });
        }

        // hovers
        if (_pGlob.objHoverInfo && _pGlob.objHoverInfo.length && appInstance.renderCallbacks.indexOf(onControllerHover) == -1)
            appInstance.renderCallbacks.push(onControllerHover);

        _pGlob.xrSessionAcquired = true;

        enterCb();

    }, unAvailableCb, function() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            controller.removeEventListener('select', _pXROnSelect);

            _pGlob.xrSessionCallbacks.forEach(function(pair) {
                controller.removeEventListener(pair[0], pair[1]);
            });
        }

        var cbIdx = appInstance.renderCallbacks.indexOf(onControllerHover);
        if (cbIdx != -1)
            appInstance.renderCallbacks.splice(cbIdx, 1);

        _pGlob.xrSessionAcquired = false;

        exitCb();
    });
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}



// checkVRMode puzzle
function checkVRMode(availableCb, unAvailableCb) {
    // COMPAT: < 2.13.1
    if (v3d.Detector.checkWebXR)
        v3d.Detector.checkWebXR('immersive-vr', availableCb, unAvailableCb);
    else
        appInstance.checkWebXR('immersive-vr', availableCb, unAvailableCb);
}



// getGamepadProp puzzle
function getGamepadProp(index, prop, controlIndex) {

    if (_pGlob.xrSessionAcquired) {
        var controller = appInstance.xrControllers[index];

        if (controller && controller.userData.v3d && controller.userData.v3d.inputSource &&
                controller.userData.v3d.inputSource.gamepad)
            var gamepad = controller.userData.v3d.inputSource.gamepad;
        else
            var gamepad = undefined;

    } else {
        var gamepad = navigator.getGamepads()[index];
    }

    switch (prop) {
    case 'AXIS':
        if (gamepad)
            return (gamepad.axes[controlIndex] || 0);
        else
            return 0;

    case 'BUTTON':
        if (gamepad) {
            var button = gamepad.buttons[controlIndex];

            if (button)
                return button.pressed;
            else
                return false;
        } else {
            return false;
        }

    case 'ANALOG_BUTTON':
        if (gamepad) {
            var button = gamepad.buttons[controlIndex];

            if (button)
                return button.value;
            else
                return 0.0;
        } else {
            return 0.0;
        }

    case 'ID':
        if (gamepad)
            return gamepad.id;
        else
            return '';

    case 'CONNECTION_STATUS':
        if (gamepad)
            return gamepad.connected;
        else
            return false;

    case 'TIMESTAMP':
        if (gamepad)
            return gamepad.timestamp;
        else
            return 0.0;

    case 'DEBUG_INFO':
        if (gamepad) {

            var axes = gamepad.axes;
            var axesValues = []

            for (var i = 0; i < axes.length; i++) {
                axesValues.push(Math.round(axes[i] * 1000) / 1000);
            }

            var buttons = gamepad.buttons;
            var btnsPressed = [];
            var btnsValues = [];

            for (var i = 0; i < buttons.length; i++) {
                btnsPressed.push(buttons[i].pressed ? '☑' : '☐');
                btnsValues.push(Math.round(buttons[i].value * 1000) / 1000);
            }

            return 'Index: ' + index + '\n' +
                   'Connected: ' + (gamepad.connected ? 'Yes' : 'No') + '\n' +
                   'ID: ' + (gamepad.id ? gamepad.id : 'N/A') + '\n' +
                   'Axes: ' + String(axesValues) + '\n' +
                   'Buttons: ' + String(btnsPressed) + '\n' +
                   'Analog Buttons: ' + String(btnsValues) + '\n' +
                   'Timestamp: ' + (gamepad.timestamp ? gamepad.timestamp.toFixed(3) : 0);
        } else {
            return 'Gamepad not available';
        }
    }

}



// everyFrame puzzle
function registerEveryFrame(callback) {
    if (typeof callback == 'function') {
        appInstance.renderCallbacks.push(callback);
        if (v3d.PL.editorRenderCallbacks)
            v3d.PL.editorRenderCallbacks.push([appInstance, callback]);
    }
}



if (isSceneLoaded('')) {
  speed = 0.05;
  fly = false;
  moveVector = createVector(0, 0, 0);
  orientation = createVector(0, 0, 0);
  player = 'Player';
  makeParent('__DEFAULT_CAMERA__', 'Player');
  setActiveCamera('__DEFAULT_CAMERA__');
}

xrSessionEvent('connected', function(event) {
  traverseControllers(function() {
    if (xrControllerProp('HANDEDNESS') == 'left') {
      createObject('BOX', 'leftController', 0.1, 0.1, 0.1, 0, 0, 0, 'PERSPECTIVE', 'AMBIENT', 0);
      makeParent(getEntityByName('leftController', 'OBJECT'), xrControllerProp('OBJECT'));
    }
    if (xrControllerProp('HANDEDNESS') == 'right') {
      createObject('BOX', 'rightController', 0.1, 0.1, 0.1, 0, 0, 0, 'PERSPECTIVE', 'AMBIENT', 0);
      makeParent(getEntityByName('rightController', 'OBJECT'), xrControllerProp('OBJECT'));
    }
  });
});

addHTMLElement('button', 'enterVR', 'TO', ['CONTAINER'], false);
setHTMLElemStyle('position', 'absolute', 'enterVR', false);
setHTMLElemStyle('bottom', '10%', 'enterVR', false);
setHTMLElemStyle('left', '48%', 'enterVR', false);
setHTMLElemStyle('padding', '8px', 'enterVR', false);
checkVRMode(function() {
  setHTMLElemAttribute('innerHTML', 'Enter VR', 'enterVR', false);
  eventHTMLElem('click', 'enterVR', false, function(event) {
    enterVRMode('SITTING', function() {}, function() {}, function() {});
  });
}, function() {
  setHTMLElemAttribute('innerHTML', 'WebXR Not Supported', 'enterVR', false);
});

registerEveryFrame(function() {
  traverseControllers(function() {
    if (xrControllerProp('HANDEDNESS') == 'left') {
      move(getGamepadProp(xrControllerProp('GAMEPAD_INDEX'), 'AXIS', '2'), getGamepadProp(xrControllerProp('GAMEPAD_INDEX'), 'AXIS', '3'));
    }
  });
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
